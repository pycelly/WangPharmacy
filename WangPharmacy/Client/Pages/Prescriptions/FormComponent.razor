@inject HttpClient _client

<EditForm Model="@prescription" OnValidSubmit="@OnVaildSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Appointments: </label>
            <div>
                <InputSelect @bind-Value="prescription.AppointmentId" class="form-control">
                    <option value="">-- Select Appointment --</option>
                    @if (Appointments != null)
                    {
                        foreach (var appointment in Appointments)
                        {
                        <option value="@appointment.Id">@appointment.Id,@appointment.Customer.CustomerName</option>}
                        }
                </InputSelect>
                <ValidationMessage For="@(() => prescription.AppointmentId)" />
            </div>
        </div>

        <div class="form-group">
            <label>Prescription Name: </label>
            <div>
                <InputText @bind-Value="@prescription.PrescriptionName" class="form-control" />
                <ValidationMessage For="@(() => prescription.PrescriptionName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Prescription Description: </label>
            <div>
                <InputText @bind-Value="@prescription.PrescriptionDescription" class="form-control" />
                <ValidationMessage For="@(() => prescription.PrescriptionDescription)" />
            </div>
        </div>

    </fieldset>
    @if (!Disabled)
    {
<button type="submit" class="btn btn-success btn-block">
    @ButtonText
</button>}
    <BackToList Target="prescriptions" />
</EditForm>

@code{ 
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Prescription prescription { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnVaildSubmit { get; set; }

    private IList<Appointment> Appointments;


    protected async override Task OnInitializedAsync()
    {
        Appointments = await _client.GetFromJsonAsync<List<Appointment>>($"{Endpoints.AppointmentsEndpoint}");

    } }