@inject HttpClient _client

<EditForm Model="@appointment" OnValidSubmit="@OnVaildSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="appointment.CustomerId" class="form-control">
                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
<option value="@customer.Id">@customer.CustomerName</option>}
}
            </InputSelect>
            <ValidationMessage For="@(() => appointment.CustomerId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Staff: </label>
        <div>
            <InputSelect @bind-Value="appointment.StaffId" class="form-control">
                <option value="">-- Select Staff --</option>
                @if (Staffs != null)
                {
                    foreach (var staff in Staffs)
                    {
<option value="@staff.Id">@staff.StaffName</option>}
}
            </InputSelect>
            <ValidationMessage For="@(() => appointment.StaffId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Appointment Date Time: </label>
        <div>
            <InputDate @bind-Value="@appointment.AppointmentDateTime" class="form-control" />
            <ValidationMessage For="@(() => appointment.AppointmentDateTime)" />
        </div>
    </div>




    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
    <BackToList Target="appointments" />
</EditForm>

@code{ 
    [Parameter] public Appointment appointment { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnVaildSubmit { get; set; }

    private IList<Customer> Customers;
    private IList<Staff> Staffs;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    }