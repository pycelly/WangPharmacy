@page "/appointments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class=" card-title">Appointments</h3>
@if (Appointments == null)
{
    <div class="alert alert-info">Loading Appointments</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Appointment Id</th>
                <th>Appointment Date</th>
                <th>Customer</th>
                <th>Staff</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appointment in Appointments)
            {
            <tr>
                <td>@appointment.Id</td>
                <td>@appointment.AppointmentDateTime.Date.ToString("dd MMMM yyyy")</td>
                <td>@appointment.Staff.StaffName</td>
                <td>@appointment.Customer.CustomerName</td>
                <td>
                    <a href="/Appointments/view/@appointment.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/Appointments/edit/@appointment.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(() =>Delete(appointment.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Appointment> Appointments;
    protected async override Task OnInitializedAsync()
    {
        Appointments = await _client.GetFromJsonAsync<List<Appointment>>($"{Endpoints.AppointmentsEndpoint}");
    }

    async Task Delete(int appointmentId)
    {
        var appointment = Appointments.First(q => q.Id == appointmentId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {appointment.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.AppointmentsEndpoint}/{appointmentId}");
            await OnInitializedAsync();
        }
    }
}
